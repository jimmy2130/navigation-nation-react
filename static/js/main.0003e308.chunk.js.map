{"version":3,"sources":["components/menu-bar/menu-bar.component.jsx","components/home-section/home-section.component.jsx","components/section-block/section-block.component.jsx","sectionInfo.js","components/menu-items/menu-items.component.jsx","components/menu-overlay/menu-overlay.component.jsx","App.js","utils/toggle.js","serviceWorker.js","index.js"],"names":["MenuBar","handleClick","isClicked","className","onClick","HomeSection","id","href","target","rel","SectionBlock","text","color","style","section","MenuItems","console","log","map","item","index","key","MenuOverlay","props","App","toggleFunc","useState","setIsClicked","Toggle","contentBlock","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sUAaeA,G,WAVC,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAC9B,OACE,yBAAKC,UAAS,oBAAeD,EAAY,SAAW,IAAME,QAASH,GACjE,yBAAKE,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,YCCNE,G,MANK,WAClB,OACE,6BAASC,GAAG,QAAO,uBAAGC,KAAK,yBAAyBC,OAAO,SAASC,IAAI,uBAArD,qBCMRC,G,MARM,SAAC,GAAuB,IAAtBJ,EAAqB,EAArBA,GAAIK,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAC/B,OACE,6BAASN,GAAIA,EAAIO,MAAOD,GACtB,4BAAKD,MCqBIG,G,YA3BC,CACd,CACER,GAAI,OACJM,MAAO,CAAC,gBAAmB,qBAE7B,CACEN,GAAI,QACJK,KAAM,sBACNC,MAAO,CAAC,gBAAmB,qBAE7B,CACEN,GAAI,SACJK,KAAM,yBACNC,MAAO,CAAC,gBAAmB,qBAE7B,CACEN,GAAI,WACJK,KAAM,uBACNC,MAAO,CAAC,gBAAmB,qBAE7B,CACEN,GAAI,UACJK,KAAM,oBACNC,MAAO,CAAC,gBAAmB,uBCChBG,EApBG,SAAC,GAAgC,IAA9Bd,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,UAEhC,OADAc,QAAQC,IAAIH,GAEV,6BACE,4BACGA,EAAQI,KAAI,SAACC,EAAMC,GAAP,OACX,wBACEC,IAAKF,EAAKb,GACVO,MAAOM,EAAKP,MACZT,UAAS,UAAKD,EAAS,mBAAekB,EAAQ,GAAvB,oBAA0CA,EAAQ,IACzEhB,QAASH,GAET,uBAAGM,KAAI,WAAMY,EAAKb,KAAOa,EAAKb,WCH3BgB,EATK,SAACC,GAAW,IACtBrB,EAAcqB,EAAdrB,UACR,OACE,yBAAKC,UAAS,kBAAaD,EAAY,sBAAwB,uBAC7D,kBAAC,EAAcqB,K,OCiBNC,MAlBf,WAEE,IAAMC,ECRc,WAAO,IAAD,EACQC,oBAAS,GADjB,mBACnBxB,EADmB,KACRyB,EADQ,KAK1B,MAAO,CACLzB,UAAWA,EACXD,YALkB,WAClB0B,GAAczB,KDKG0B,GACbC,EAAef,EAAQgB,MAAM,GAEnC,OACA,6BACE,kBAAC,EAAgBL,GACjB,kBAAC,EAAYA,GACb,kBAAC,EAAD,MACCI,EAAaX,KAAI,SAAAC,GAAI,OACpB,kBAAC,EAAD,eAAcE,IAAKF,EAAKb,IAAQa,SENlBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.0003e308.chunk.js","sourcesContent":["import React from 'react';\nimport './menu-bars.styles.css';\n\nconst MenuBar = ({ handleClick, isClicked }) => {\n  return(\n    <div className={`menu-bars ${isClicked ? \"change\" : \"\"}`} onClick={handleClick}>\n      <div className=\"bar1\"></div>\n      <div className=\"bar2\"></div>\n      <div className=\"bar3\"></div>\n    </div>\n  );\n}\n\nexport default MenuBar;","import React from 'react';\nimport './home-section.styles.css';\n\nconst HomeSection = () => {\n  return(\n    <section id=\"home\"><a href=\"https://jacinto.design\" target=\"_blank\" rel=\"noopener noreferrer\">Jacinto Design</a></section>\n  );\n}\n\nexport default HomeSection;","import React from 'react';\nimport './section-block.styles.css';\n\nconst SectionBlock = ({id, text, color}) => {\n  return(\n    <section id={id} style={color}>\n      <h1>{text}</h1>\n    </section>\n  );\n}\n\nexport default SectionBlock;","const section = [\n  {\n    id: 'home',\n    color: {'backgroundColor': 'var(--navColor1)'}\n  },\n  {\n    id: 'about',\n    text: 'Learn More About Me',\n    color: {'backgroundColor': 'var(--navColor2)'}\n  },\n  {\n    id: 'skills',\n    text: 'These Are My Strengths',\n    color: {'backgroundColor': 'var(--navColor3)'}\n  },\n  {\n    id: 'projects',\n    text: 'These Are My Results',\n    color: {'backgroundColor': 'var(--navColor4)'}\n  },\n  {\n    id: 'contact',\n    text: 'Available Anytime',\n    color: {'backgroundColor': 'var(--navColor5)'}\n  }\n];\n\nexport default section;","import React from 'react';\nimport './menu-items.styles.css';\nimport section from '../../sectionInfo.js';\n\nconst MenuItems = ({ handleClick, isClicked }) => {\n  console.log(section)\n  return(\n    <nav>\n      <ul>\n        {section.map((item, index) => (\n          <li\n            key={item.id}\n            style={item.color}\n            className={`${isClicked ? `slide-in-${index + 1}` : `slide-out-${index + 1}`}`}\n            onClick={handleClick}\n          >\n            <a href={`#${item.id}`}>{item.id}</a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n}\n\nexport default MenuItems;","import React from 'react';\nimport './menu-overlay.styles.css';\nimport MenuItems from '../menu-items/menu-items.component';\n\nconst MenuOverlay = (props) => {\n  const { isClicked } = props;\n  return(\n    <div className={`overlay ${isClicked ? \"overlay-slide-right\" : \"overlay-slide-left\"}`}>\n      <MenuItems {...props}/>\n    </div>\n  );\n}\n\nexport default MenuOverlay;","import React from 'react';\nimport MenuBar from './components/menu-bar/menu-bar.component';\nimport HomeSection from './components/home-section/home-section.component';\nimport SectionBlock from './components/section-block/section-block.component';\nimport MenuOverlay from './components/menu-overlay/menu-overlay.component';\nimport { Toggle } from './utils/toggle.js';\nimport section from './sectionInfo.js';\nfunction App() {\n\n  const toggleFunc = Toggle();\n  const contentBlock = section.slice(1);\n\n  return(\n  <div>\n    <MenuOverlay {...toggleFunc}/>\n    <MenuBar {...toggleFunc}/>\n    <HomeSection />\n    {contentBlock.map(item => (\n      <SectionBlock key={item.id} {...item}>\n      </SectionBlock>\n    ))}\n  </div>\n  )\n}\n\nexport default App;\n","import { useState } from 'react';\nexport const Toggle = () => {\n  const [isClicked, setIsClicked] = useState(false);\n  const handleClick = () => {\n    setIsClicked(!isClicked);\n  };\n  return {\n    isClicked: isClicked,\n    handleClick: handleClick\n  };\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}